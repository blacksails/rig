version: "3"

env:
  TOOLS_BIN: "{{ .ROOT_DIR }}/tools/bin"
  RIG_OPERATOR_DOCKER_TAG: dev
  RIG_PLATFORM_DOCKER_TAG: latest
  RIG_OPERATOR_CHART_PATH: "{{ .ROOT_DIR }}/deploy/charts/rig-operator"
  RIG_PLATFORM_CHART_PATH: "{{ .ROOT_DIR }}/deploy/charts/rig-platform"

run: once

includes:
  tools:
    taskfile: ./tools/taskfile.yaml
    dir: ./tools

tasks:
  build:
    desc: "üî® Build all binaries"
    deps: [build-rig, build-rig-ops, build-rig-operator, build-plugins]

  build-rig:
    desc: "üî® Build rig binary"
    deps: [proto]
    env:
      CGO_ENABLED: "0"
    sources:
      - cmd/rig/cmd/dev/kind/**/*
      - "**/*.go"
    generates:
      - "bin/rig"
    cmds:
      - go build -o ./bin/rig ./cmd/rig

  build-rig-ops:
    desc: "üî® Build rig-ops binary"
    deps: [proto]
    env:
      CGO_ENABLED: "0"
    sources:
      - "**/*.go"
    generates:
      - "bin/rig-ops"
    cmds:
      - go build -o ./bin/rig-ops ./cmd/rig-ops

  build-rig-operator:
    desc: "üî® Build rig-operator binary"
    deps: [proto, build-plugins]
    env:
      CGO_ENABLED: "0"
    sources:
      - "**/*.go"
    generates:
      - "bin/rig-operator"
    cmds:
      - go build -o ./bin/rig-operator ./cmd/rig-operator

  build-plugins:
    desc: "üî® Build rig-operator plugins"
    sources:
      - "pkg/controller/plugin/**/*.go"
    vars:
      PLUGINS:
        sh: find ./pkg/controller/plugin/ -mindepth 1 -type d | xargs -I{} basename {}
    cmds:
      - for: { var: PLUGINS }
        task: build-plugin
        vars:
          PLUGIN: "{{ .ITEM }}"

  build-plugin:
    run: when_changed
    deps: [proto]
    env:
      CGO_ENABLED: "0"
    sources:
      - "./pkg/controller/plugin/{{ .PLUGIN }}/**/*.go"
    generates:
      - "bin/plugin/{{ .PLUGIN }}"
    cmds:
      - go build -o ./bin/plugin/{{ .PLUGIN }} ./pkg/controller/plugin/{{ .PLUGIN }}

  gen:
    desc: "ü™Ñ Run code generation"
    deps: [proto, manifests, generate-k8s, docs-gen, mocks]

  proto:
    desc: "ü™Ñ Run protobuf generation"
    deps:
      - tools:buf
      - tools:protoc-gen-go
      - tools:protoc-gen-connect-go
      - tools:protoc-gen-doc
      - tools:protoc-gen-go-grpc
    sources:
      - proto/rig/**/*
    generates:
      - gen/go/rig/**/*
      - docs/docs/api/platform-api.md
    cmds:
      - mkdir -p gen/go/rig
      - printf "module github.com/rigdev/rig-go-api\n\ngo 1.20\n" > ./gen/go/rig/go.mod
      - find . -path './gen/go/rig/*' -type f -name '*.go' -delete
      - $TOOLS_BIN/buf generate proto/rig --template proto/buf.gen.yaml
      - cd gen/go/rig/; go get -u ./...
      - find proto/rig/ -iname *.proto | xargs clang-format -i

  mocks:
    desc: "ü™Ñ Run mock generation"
    deps: [tools:mockery, proto]
    vars:
      GOMODCACHE:
        sh: go env GOMODCACHE
    sources:
      - pkg/service/config/config.go
      - "{{ .GOMODCACHE }}/sigs.k8s.io/controller-runtime*/pkg/client/*.go"
      - "{{ .GOMODCACHE }}/k8s.io/client-go*/discovery/*.go"
    generates:
      - gen/mocks/**/*.go
    cmds:
      - cmd: rm -r gen/mocks
        ignore_error: true
      - $TOOLS_BIN/mockery

  manifests:
    desc: "ü™Ñ Run k8s manifests generation"
    deps: [tools:controller-gen, proto]
    sources:
      - pkg/api/v1alpha1/*.go
      - pkg/api/v1alpha2/*.go
      - pkg/controller/*.go
    generates:
      - deploy/kustomize/rbac/**/*.yaml
      - deploy/kustomize/webhook/**/*.yaml
      - deploy/kustomize/crd/**/*.yaml
    cmds:
      - |
        $TOOLS_BIN/controller-gen rbac:roleName=rig crd webhook \
          paths="./pkg/api/v1alpha1;./pkg/api/v1alpha2;./pkg/controller" \
          output:rbac:dir=deploy/kustomize/rbac \
          output:webhook:dir=deploy/kustomize/webhook \
          output:crd:dir=deploy/kustomize/crd/bases

  generate-k8s:
    desc: "ü™Ñ Run runtime.Object implementaion generation"
    deps: [tools:controller-gen, proto]
    sources:
      - pkg/api/**/*.go
    generates:
      - pkg/api/**/zz_generated.deepcopy.go
    cmds:
      - $TOOLS_BIN/controller-gen object paths="./pkg/api/..."

  docs:
    desc: "üìù Run documentation site"
    dir: docs
    cmds:
      - npm i
      - npm run start

  docs-gen:
    desc: "üìö Generate api references"
    deps: [tools:crd-ref-docs, proto]
    sources:
      - docs/crd-ref-docs/**/*
      - pkg/api/config/v1alpha1/**/*
      - pkg/api/v1alpha1/**/*
      - pkg/api/v1alpha2/**/*
    generates:
      - docs/docs/api/config/v1alpha1.md
      - docs/docs/api/v1alpha1.md
      - docs/docs/api/v1alpha2.md
    cmds:
      - |
        $TOOLS_BIN/crd-ref-docs --renderer markdown \
          --config ./docs/crd-ref-docs/config.yaml \
          --templates-dir ./docs/crd-ref-docs/templates \
          --source-path ./pkg/api/config/v1alpha1 \
          --output-path ./docs/docs/api/config/v1alpha1.md
      - |
        $TOOLS_BIN/crd-ref-docs --renderer markdown \
          --config ./docs/crd-ref-docs/config.yaml \
          --templates-dir ./docs/crd-ref-docs/templates \
          --source-path ./pkg/api/v1alpha1 \
          --output-path ./docs/docs/api/v1alpha1.md
      - |
        $TOOLS_BIN/crd-ref-docs --renderer markdown \
          --config ./docs/crd-ref-docs/v1alpha2-config.yaml \
          --templates-dir ./docs/crd-ref-docs/templates \
          --source-path ./pkg/api/v1alpha2 \
          --output-path ./docs/docs/api/v1alpha2.md

  lint:
    desc: "üö® Run linting"
    deps: [tools:golangci-lint, proto]
    cmds:
      - $TOOLS_BIN/golangci-lint run --timeout 3m

  test:
    desc: "‚úÖ Run unit tests"
    deps: [tools:gotestsum, proto]
    cmds:
      - |
        $TOOLS_BIN/gotestsum \
          --format-hide-empty-pkg \
          --hide-summary skipped -- \
          -race \
          -short \
          ./...

  test-all:
    desc: "‚úÖ Run all tests"
    deps:
      [tools:gotestsum, tools:setup-envtest, proto, manifests, build-plugins]
    env:
      KUBEBUILDER_ASSETS:
        sh: $TOOLS_BIN/setup-envtest use 1.28.0 --bin-dir $TOOLS_BIN -p path
      RIG_PLUGIN_DIR: "{{ .ROOT_DIR }}/bin/plugin"
    cmds:
      - |
        $TOOLS_BIN/gotestsum \
          --format-hide-empty-pkg \
          --junitfile test-result.xml -- \
          -race \
          -coverprofile cover.out \
          -coverpkg $(go list ./... | grep rigdev/rig/pkg | tr "\n" ",") \
          -covermode atomic \
          ./...

  test-integration:
    desc: "‚úÖ Run integration tests"
    deps:
      [tools:gotestsum, tools:setup-envtest, proto, manifests, build-plugins]
    env:
      RIG_PLUGIN_DIR: "{{ .ROOT_DIR }}/bin/plugin"
      KUBEBUILDER_ASSETS:
        sh: $TOOLS_BIN/setup-envtest use 1.28.0 --bin-dir $TOOLS_BIN -p path
    cmds:
      - |
        $TOOLS_BIN/gotestsum \
          --format-hide-empty-pkg -- \
          -race \
          -run "^TestIntegration" \
          ./...

  docker:
    desc: "üê≥ Build docker image"
    cmds:
      - |
        docker build \
          -t ghcr.io/rigdev/rig-operator:${RIG_OPERATOR_DOCKER_TAG} \
          -f ./build/package/Dockerfile .

  kind-create:
    desc: "üêã Create kind cluster with rig dependencies"
    deps: [tools:kind, build-rig, docker]
    cmds:
      - ./bin/rig dev kind create

  kind-deploy:
    desc: "üêã Deploy rig-operator and rig-platform to kind"
    deps: [tools:kind, docker]
    vars:
      KIND_EXAMPLE: "default"
    cmds:
      # TODO: fix deploy command
      # - maybe merge it into the create command (skip everything but operator and platform post creation)
      - |
        ./bin/rig dev kind deploy \
          --operator-chart-path ./charts/rig-operator \
          --platform-chart-path ./charts/rig-platform \
          --operator-values ./deploy/kind/examples/{{ .KIND_EXAMPLE }}/operator.yaml \
          --platform-values ./deploy/kind/examples/{{ .KIND_EXAMPLE }}/platform.yaml

  clean:
    desc: "üßπ Clean everything"
    deps: [clean-kind, clean-gen]

  clean-kind:
    desc: "üßπ Clean kind cluster"
    deps: [tools:kind]
    cmds:
      - cmd: ./bin/rig dev kind delete
        ignore_error: true

  clean-gen:
    desc: "üßπ Clean generated files"
    cmds:
      - cmd: rm -r gen
        ignore_error: true

  release:
    desc: "üîñ Release project"
    deps: [tools:goreleaser, proto]
    cmds:
      - |
        $TOOLS_BIN/goreleaser release \
          -f ./build/package/goreleaser/goreleaser.yml

  release-build:
    desc: "üì∏ Build release snapshot"
    deps: [tools:goreleaser, proto]
    cmds:
      - |
        $TOOLS_BIN/goreleaser release --skip-publish \
          -f ./build/package/goreleaser/goreleaser.yml --snapshot --clean
